### First
#### Beginner a101-a111
1.  [x] Write a program that prints ‘Hello World’ to the screen.
2.  [x] Write a program that asks the user for their name and greets them with their name.
3.  [x] Modify the previous program such that only the users Alice and Bob are greeted with their names.
4.  [x] Write a program that asks the user for a number `n` and prints the sum of the numbers 1 to `n`
5.  [ ] Modify the previous program such that only multiples of three or five are considered in the sum, e.g. 3, 5, 6, 9, 10, 12, 15 for `n`=17
6.  [ ] Write a program that asks the user for a number `n` and gives them the possibility to choose between computing the sum and computing the product of 1,…,`n`.
7.  [ ] Write a program that prints a multiplication table for numbers up to 12.
8.  [ ] Write a program that prints _all_ prime numbers. (Note: if your programming language does not support arbitrary size numbers, printing all primes up to the largest number you can easily represent is fine too.)
9.  [ ] Write a guessing game where the user has to guess a secret number. After every guess the program tells the user whether their number was too large or too small. At the end the number of tries needed should be printed. It counts only as one try if they input the same number multiple times consecutively.
10.  [ ] Write a program that prints the next 20 leap years.
11.  [ ] Write a program that computes the sum of an alternating series where each element of the series is an expression of the form ((−1)k+1)/(2\*k−1) for each value of k from 1 to a million, multiplied by 4. Or, in more mathematical notation
#### Lists, Strings ls01-ls19
1.  [ ] Write a function that returns the largest element in a list.
2.  [ ] Write function that reverses a list, preferably in place.
3.  [ ] Write a function that checks whether an element occurs in a list.
4.  [ ] Write a function that returns the elements on odd positions in a list.
5.  [ ] Write a function that computes the running total of a list.
6.  [ ] Write a function that tests whether a string is a palindrome.
7.  [ ] Write three functions that compute the sum of the numbers in a list: using a `for`-loop, a `while`-loop and recursion. (Subject to availability of these constructs in your language of choice.)
8.  [ ] Write a function `on_all` that applies a function to every element of a list. Use it to print the first twenty perfect squares. The perfect squares can be found by multiplying each natural number with itself. The first few perfect squares are `1*1= 1`, `2*2=4`, `3*3=9`, `4*4=16`. Twelve for example is not a perfect square because there is no natural number `m` so that `m*m=12`. (This question is tricky if your programming language makes it difficult to pass functions as arguments.)
9.  [ ] Write a function that concatenates two lists. `[a,b,c]`, `[1,2,3]` → `[a,b,c,1,2,3]`
10.  [ ] Write a function that combines two lists by alternatingly taking elements, e.g. `[a,b,c]`, `[1,2,3]` → `[a,1,b,2,c,3]`.
11.  [ ] Write a function that merges two sorted lists into a new sorted list. `[1,4,6]`,`[2,3,5]` → `[1,2,3,4,5,6]`. You can do this quicker than concatenating them followed by a sort.
12.  [ ] Write a function that rotates a list by `k` elements. For example `[1,2,3,4,5,6]` rotated by two becomes `[3,4,5,6,1,2]`. Try solving this without creating a copy of the list. How many swap or move operations do you need?
13.  [ ] Write a function that computes the list of the first 100 Fibonacci numbers. The first two Fibonacci numbers are 1 and 1. The `n+1`-st Fibonacci number can be computed by adding the `n`-th and the `n-1`-th Fibonacci number. The first few are therefore 1, 1, 1+1=2, 1+2=3, 2+3=5, 3+5=8.
14.  [ ] Write a function that takes a number and returns a list of its digits. So for `2342` it should return `[2,3,4,2]`.
15.  [ ] Write functions that add, subtract, and multiply two numbers in their digit-list representation (and return a new digit list). If you’re ambitious you can implement [Karatsuba multiplication](https://en.wikipedia.org/wiki/Karatsuba_algorithm). Try [different bases](https://en.wikipedia.org/wiki/Radix). What is the best base if you care about speed? If you couldn’t completely solve the prime number exercise above due to the lack of large numbers in your language, you can now use your own library for this task.
16.  [ ] Write a function that takes a list of numbers, a starting base `b1` and a target base `b2` and interprets the list as a number in base `b1` and converts it into a number in base `b2` (in the form of a list-of-digits). So for example `[2,1,0]` in base 3 gets converted to base 10 as `[2,1]`.
17.  [ ] Implement the following sorting algorithms: Selection sort, Insertion sort, Merge sort, Quick sort, Stooge Sort. Check Wikipedia for descriptions.
18.  [ ] Implement binary search.
19.  [ ] Write a function that takes a list of strings an prints them, one per line, in a rectangular frame. For example the list `["Hello", "World", "in", "a", "frame"]` gets printed as:
```
*********
* Hello *
* World *
* in    *
* a     *
* frame *
*********
```
20.  [ ] Write function that translates a text to Pig Latin and back. English is translated to Pig Latin by taking the first letter of every word, moving it to the end of the word and adding ‘ay’. “The quick brown fox” becomes “Hetay uickqay rownbay oxfay”.
#### InterMediate b101-b115
1.  [ ] Write a program that outputs all possibilities to put `+` or `-` or nothing between the numbers 1,2,…,9 (in this order) such that the result is 100. For example 1 + 2 + 3 - 4 + 5 + 6 + 78 + 9 = 100.
2.  [ ] Write a program that takes the duration of a year (in fractional days) for an imaginary planet as an input and produces a leap-year rule that minimizes the difference to the planet’s solar year.
3.  [ ] Implement a data structure for graphs that allows modification (insertion, deletion). It should be possible to store values at edges and nodes. It might be easiest to use a dictionary of (node, edgelist) to do this.
4.  [ ] Write a function that generates a DOT representation of a graph.
5.  [ ] Write a program that automatically generates essays for you.
    1.  [ ] Using a sample text, create a directed (multi-)graph where the words of a text are nodes and there is a directed edge between `u` and `v` if `u` is followed by `v` in your sample text. Multiple occurrences lead to multiple edges.
    2.  [ ] Do a random walk on this graph: Starting from an arbitrary node choose a random successor. If no successor exists, choose another random node.
6.  [ ] Write a program that automatically converts English text to Morse code and vice versa.
7.  [ ] Write a program that finds the longest palindromic substring of a given string. Try to be as efficient as possible!
8.  [ ] Think of a good interface for a list. What operations do you typically need? You might want to investigate the list interface in your language and in some other popular languages for inspiration.
9.  [ ] Implement your list interface using a fixed chunk of memory, say an array of size 100. If the user wants to add more stuff to your list than fits in your memory you should produce some kind of error, for example you can throw an exception if your language supports that.
10.  [ ] Improve your previous implementation such that an arbitrary number of elements can be stored in your list. You can for example allocate bigger and bigger chunks of memory as your list grows, copy the old elements over and release the old storage. You should probably also release this memory eventually if your list shrinks enough not to need it anymore. Think about how much bigger the new chunk of memory should be so that your performance won’t be killed by allocations. Increasing the size by 1 element for example is a bad idea.
11.  [ ] If you chose your growth right in the previous problem, you typically won’t allocate very often. However, adding to a big list sometimes consumes considerable time. That might be problematic in some applications. Instead try allocating new chunks of memory for new items. So when your list is full and the user wants to add something, allocate a new chunk of 100 elements instead of copying all elements over to a new large chunk. Think about where to do the book-keeping about which chunks you have. Different book keeping strategies can quite dramatically change the performance characteristics of your list.
12.  [ ] Implement a binary heap. Once using a list as the base data structure and once by implementing a pointer-linked binary tree. Use it for implementing heap-sort.
13.  [ ] Implement an unbalanced binary search tree.
14.  [ ] Implement a balanced binary search tree of your choice. I like (a,b)-trees best.
15.  [ ] Compare the performance of insertion, deletion and search on your unbalanced search tree with your balanced search tree and a sorted list. Think about good input sequences. If you implemented an (a,b)-tree, think about good values of a and b.
#### Advanced c101-c106
1.  [ ] Given two strings, write a program that efficiently finds the longest common subsequence.
2.  [ ] Given an array with numbers, write a program that efficiently answers queries of the form: “Which is the nearest larger value for the number at position `i`?”, where distance is the difference in array indices. For example in the array `[1,4,3,2,5,7]`, the nearest larger value for 4 is 5. After linear time preprocessing you should be able to answer queries in constant time.
3.  [ ] Given two strings, write a program that outputs the shortest sequence of character insertions and deletions that turn one string into the other.
4.  [ ] Write a function that multiplies two matrices together. Make it as efficient as you can and compare the performance to a polished linear algebra library for your language. You might want to read about [Strassen’s algorithm](https://en.wikipedia.org/wiki/Strassen_algorithm) and the effects CPU caches have. Try out different matrix layouts and see what happens.
5.  [ ] Implement a [van Emde Boas](https://en.wikipedia.org/wiki/Van_Emde_Boas_tree) tree. Compare it with your previous search tree implementations.
6.  [ ] Given a set of d-dimensional rectangular boxes, write a program that computes the volume of their union. Start with 2D and work your way up.
#### GUI gui01-gui03
-  [ ] Write a program that displays a bouncing ball.
-  [ ] Write a [Memory](https://en.wikipedia.org/wiki/Memory_%28game%29) game.
-  [ ] Write a Tetris clone
#### Open Ended oe01-oe03
1.  [ ] Write a program that plays Hangman as good as possible. For example you can use a large dictionary like [this](http://wordlist.sourceforge.net/) and select the letter that excludes most words that are still possible solutions. Try to make the program as efficient as possible, i.e. don’t scan the whole dictionary in every turn.
2.  [ ] Write a program that plays Rock, Paper, Scissors better than random against a human. Try to exploit that humans are very bad at generating random numbers.
3.  [ ] Write a program that plays Battle Ship against human opponents. It takes coordinates as input and outputs whether that was a hit or not and its own shot’s coordinates.

### Second
#### Beginner a201-a220
1.  [x] Write a program which finds the factorial of a number entered by the user. (check for all conditions).  
2.  [ ] Develop a program to convert currency X to currency Y and visa versa.  
	- check how zebis update currency rate. hope rewrite to rust.
3.  [ ] Write a program that print out the following, user will input the top number:  
```
*****  
****  
***  
**  
*
```
4.  [ ] Write a program that print out the following, user will input the bottom number: *  
```
**  
** *  
****  
******  
```
5.  [ ] Write a program that pring out the following triangle, the user will input the bottom number:  
```
*
***  
*****  
*******  
```
6.  [ ] Develop a program that uses a randomly generated number to select 1 of 3(or more)  
functions to show the user. (Beginner)  
7.  [ ] Guessing game. Write a c++ game that asks the user to guess a number between 1 and a 100. If you guessed correctly, it will say you win. If your too high or too low it will also let you know. (Beginner)  
8.  [ ] Create a program which generates Fibonacci series till a number 'n' where 'n' is entered by the user. For eg. if the user enters 10 then the output would be: 1 1 2 3 5 8 (Beginner)  
9.  [ ] Determine how many of the characters are vowels and how many are consonants in a given line of text. Also terminate the string when the input character encountered is other than the alphabets. (Beginner).  
10.  [ ] Find the Fifth root of the sum of the squares of the first 100 ODD numbers only. (Beginner)  
11.  [ ] Perform 4-letter WORD UNSCRAMBLING i.e. List all possible combinations of 4-letters in a word. Ex: The word 'TEST' can be unscrambled as TEST,TETS,TSET,TSTE,TTSE,TTES,etc. (Beginner)  
12.  [ ] Make a program that allows the user to input either the radius, diameter, or area of the circle. The program should then calculate the other 2 based on the input. (Beginner)  
13.  [ ] READ a line of text and WRITE it out BACKWARDS using RECURSIVE Function. (Beginner)  
14.  [ ] Write a program to SWAP the contents of 3 variables without using the temporary (or extra) variables. (Beginner)  
15.  [ ] Write a program which reverses the numerals in an integer, that is 326 becomes 623, etc.. (Beginner)  
16.  [ ] The program will tell the user each time whether he guessed high or low. The user WINS the game when the number guessed is same as randomly generated number. (Beginner)  
17.  [ ] Write a program to simulate a simple calculator. It should accept two number from the user along with the required operation to be performed. Addition, Subtraction, Division and Multiplication are the basic operations that should be implemented. Feel free to implement the other operations (Beginner)  
18.  [ ] Determine how much money is in a piggy bank that contains several 50 paise coins, 25 paise coins, 20 paise coins, 10 paise coins and 5 paise coins. Use the following values to test your program : Five 50 paise coins, Three 25 paise coins, Two 20 paise coins, One 10 paise coin and Fifteen 5 paise coins. (Beginner)  
19.  [ ] Create a simple Palindrome checker program. The program should allow the user to enter a string and check whether the given string is a palindrome or not. Only digits and alphabets should be considered while checking for palindromes -- any other characters are to be ignored. (beginner)  
20.  [ ] Write a program that allows you to input students' scores and weights. The program should then calculate a weighted average and score based on the data inputted by the user. (Beginner)  
#### Intermediate b201-b208
21.  [ ] Write a program which will print all the pairs of prime numbers whose sum equals the number entered by the user. ( suggested by Aniseed ) (Intermediate)  
22.  [ ] Develop a animal classification program base on the animal kingdom. (for practice the use of inhabitant classes).  
23.  [ ] Write a quiz program, which retrieve question, and answer from a file. Then allow the user to take the quiz/count point and return score. (Intermediate)  
24.  [ ] Write a program that accepts XHTML, parses and removes the tags. Then it prints out the remaining text. (Intermediate)  
25.  [ ] Write a program which performs addition, subtraction, multiplication of matrices. The dimensions of both the matrices would be specified by the user (dynamic memory allocation required). Use of structure or a class to define the matrix would be a good idea. (Intermediate)  
26.  [ ] Write a program which will perform the job of moving the file from one location to another. The source and destination path will be entered by the user. Perform the required error checking and handle the exceptions accordingly. (Intermediate)  
27.  [ ] Create a sophisticated linked list class. You should be able to insert and delete nodes anywhere in the list, and the nodes should have pointers to nodes both in front and behind them. (Intermediate)  
28.  [ ] Create a program that implements a database in C++. The fields are hard-coded, and the data is saved in a binary file. Although this isn't really flexibility, you aren't relying on any external libraries or functions. (Intermediate)  
#### Expert c201-c211
1.  [ ] Implement your own strstr.  
2.  [ ] Write a program which acted like a personal planner. In which a user can input in event, note of thing to-do on certain date.  
3.  [ ] Tic Tac Toe program.  
4.  [ ] Simple file encryption (using something simple like ROT13.  
5.  [ ] Write a phone/address book program, with data save in binary files. The users should be able to add/delete/change the data.  
6.  [ ] Write a simple payroll program, that would include pay rates, and hours work for employees.  
7.  [ ] Create a few classes that model playing cards. Then use this framework to create your favorite card game. Blackjack..etc(expert)  
8.  [ ] Create a few classes that model chess pieces. Then develop a real chess game.(Expert)  
9.  [ ] Create a binary tree which has search and sorting functions. (Expert)  
10.  [ ] Create a Quine, that is, a program that prints out its own source code. (Expert)  
11.  [ ] Implement your own version of the Standard Template Library. (Expert)  
#### Graphics g101-g105
1.  [ ] Write a program to draw a rectangle, ellipse, square, circle, point and line based on user input. (Beginner)  
2.  [ ] Write a program to emulate Microsoft Paint. It should be possible to switch between different tools (circle, rectangle, eraser...) using pre-defined key strocks. – Intermediate  
3.  [ ] Write a program to plot a simple x-y graph for a harcoded function (e.g. y=cos(x)). It should be possible to zoom in on any part of the graph. - Intermediate.  
4.  [ ] Write a program to plot a graph of given equation of form y=f(x) and a range for x as command line arguments. (e.g. my_graph_plotter -eq="y=x*x" -xmin=-10, -xmax=10) - Expert. (PS: more to do with equation solving than graphics)  
5.  [ ] Write the classic brick-break-out game. E.g. see DX Ball. – Expert.
